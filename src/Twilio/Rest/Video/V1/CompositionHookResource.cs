/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
/// 
/// CompositionHookResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Video.V1 
{

    public class CompositionHookResource : Resource 
    {
        public sealed class FormatEnum : StringEnum 
        {
            private FormatEnum(string value) : base(value) {}
            public FormatEnum() {}
            public static implicit operator FormatEnum(string value)
            {
                return new FormatEnum(value);
            }

            public static readonly FormatEnum Mp4 = new FormatEnum("mp4");
            public static readonly FormatEnum Webm = new FormatEnum("webm");
        }

        private static Request BuildFetchRequest(FetchCompositionHookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Video,
                "/v1/CompositionHooks/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Returns a single Composition Hook Instance resource identified by a CompositionHookSid.
        /// </summary>
        /// <param name="options"> Fetch CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Fetch(FetchCompositionHookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Returns a single Composition Hook Instance resource identified by a CompositionHookSid.
        /// </summary>
        /// <param name="options"> Fetch CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> FetchAsync(FetchCompositionHookOptions options, 
                                                                                            ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Returns a single Composition Hook Instance resource identified by a CompositionHookSid.
        /// </summary>
        /// <param name="pathSid"> The Composition Hook Sid that uniquely identifies the Composition Hook to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchCompositionHookOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Returns a single Composition Hook Instance resource identified by a CompositionHookSid.
        /// </summary>
        /// <param name="pathSid"> The Composition Hook Sid that uniquely identifies the Composition Hook to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> FetchAsync(string pathSid, 
                                                                                            ITwilioRestClient client = null)
        {
            var options = new FetchCompositionHookOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadCompositionHookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Video,
                "/v1/CompositionHooks",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// List of all Recording Composition Hooks.
        /// </summary>
        /// <param name="options"> Read CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static ResourceSet<CompositionHookResource> Read(ReadCompositionHookOptions options, 
                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<CompositionHookResource>.FromJson("composition_hooks", response.Content);
            return new ResourceSet<CompositionHookResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// List of all Recording Composition Hooks.
        /// </summary>
        /// <param name="options"> Read CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<CompositionHookResource>> ReadAsync(ReadCompositionHookOptions options, 
                                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<CompositionHookResource>.FromJson("composition_hooks", response.Content);
            return new ResourceSet<CompositionHookResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// List of all Recording Composition Hooks.
        /// </summary>
        /// <param name="enabled"> Only show Composition Hooks enabled or disabled. </param>
        /// <param name="dateCreatedAfter"> Only show Composition Hooks created on or after this ISO8601 date-time. </param>
        /// <param name="dateCreatedBefore"> Only show Composition Hooks created before this this ISO8601 date-time. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static ResourceSet<CompositionHookResource> Read(bool? enabled = null, 
                                                                DateTime? dateCreatedAfter = null, 
                                                                DateTime? dateCreatedBefore = null, 
                                                                int? pageSize = null, 
                                                                long? limit = null, 
                                                                ITwilioRestClient client = null)
        {
            var options = new ReadCompositionHookOptions(){Enabled = enabled, DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// List of all Recording Composition Hooks.
        /// </summary>
        /// <param name="enabled"> Only show Composition Hooks enabled or disabled. </param>
        /// <param name="dateCreatedAfter"> Only show Composition Hooks created on or after this ISO8601 date-time. </param>
        /// <param name="dateCreatedBefore"> Only show Composition Hooks created before this this ISO8601 date-time. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<CompositionHookResource>> ReadAsync(bool? enabled = null, 
                                                                                                        DateTime? dateCreatedAfter = null, 
                                                                                                        DateTime? dateCreatedBefore = null, 
                                                                                                        int? pageSize = null, 
                                                                                                        long? limit = null, 
                                                                                                        ITwilioRestClient client = null)
        {
            var options = new ReadCompositionHookOptions(){Enabled = enabled, DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<CompositionHookResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<CompositionHookResource>.FromJson("composition_hooks", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<CompositionHookResource> NextPage(Page<CompositionHookResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Video,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<CompositionHookResource>.FromJson("composition_hooks", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<CompositionHookResource> PreviousPage(Page<CompositionHookResource> page, 
                                                                 ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Video,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<CompositionHookResource>.FromJson("composition_hooks", response.Content);
        }

        private static Request BuildDeleteRequest(DeleteCompositionHookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Video,
                "/v1/CompositionHooks/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Delete a Recording Composition Hook Instance resource identified by a `CompositionHookSid`.
        /// </summary>
        /// <param name="options"> Delete CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static bool Delete(DeleteCompositionHookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// Delete a Recording Composition Hook Instance resource identified by a `CompositionHookSid`.
        /// </summary>
        /// <param name="options"> Delete CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteCompositionHookOptions options, 
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// Delete a Recording Composition Hook Instance resource identified by a `CompositionHookSid`.
        /// </summary>
        /// <param name="pathSid"> The Recording Composition Hook Sid that uniquely identifies the Recording Composition Hook
        ///               to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteCompositionHookOptions(pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// Delete a Recording Composition Hook Instance resource identified by a `CompositionHookSid`.
        /// </summary>
        /// <param name="pathSid"> The Recording Composition Hook Sid that uniquely identifies the Recording Composition Hook
        ///               to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteCompositionHookOptions(pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        private static Request BuildCreateRequest(CreateCompositionHookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Video,
                "/v1/CompositionHooks",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Create(CreateCompositionHookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> CreateAsync(CreateCompositionHookOptions options, 
                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// create
        /// </summary>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        /// <param name="enabled"> Boolean flag for activating the Composition Hook. </param>
        /// <param name="videoLayout"> The JSON video layout description. </param>
        /// <param name="audioSources"> A list of audio sources related to this Composition Hook. </param>
        /// <param name="audioSourcesExcluded"> A list of audio sources excluded related to this Composition Hook. </param>
        /// <param name="resolution"> Pixel resolution of the composed video. </param>
        /// <param name="format"> Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        ///              </param>
        /// <param name="statusCallback"> A URL that Twilio sends asynchronous webhook requests to on every composition event.
        ///                      </param>
        /// <param name="statusCallbackMethod"> HTTP method Twilio should use when requesting the above URL. </param>
        /// <param name="trim"> Boolean flag for clipping intervals that have no media. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Create(string friendlyName, 
                                                     bool? enabled = null, 
                                                     object videoLayout = null, 
                                                     List<string> audioSources = null, 
                                                     List<string> audioSourcesExcluded = null, 
                                                     string resolution = null, 
                                                     CompositionHookResource.FormatEnum format = null, 
                                                     Uri statusCallback = null, 
                                                     Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                     bool? trim = null, 
                                                     ITwilioRestClient client = null)
        {
            var options = new CreateCompositionHookOptions(friendlyName){Enabled = enabled, VideoLayout = videoLayout, AudioSources = audioSources, AudioSourcesExcluded = audioSourcesExcluded, Resolution = resolution, Format = format, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, Trim = trim};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        /// <param name="enabled"> Boolean flag for activating the Composition Hook. </param>
        /// <param name="videoLayout"> The JSON video layout description. </param>
        /// <param name="audioSources"> A list of audio sources related to this Composition Hook. </param>
        /// <param name="audioSourcesExcluded"> A list of audio sources excluded related to this Composition Hook. </param>
        /// <param name="resolution"> Pixel resolution of the composed video. </param>
        /// <param name="format"> Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        ///              </param>
        /// <param name="statusCallback"> A URL that Twilio sends asynchronous webhook requests to on every composition event.
        ///                      </param>
        /// <param name="statusCallbackMethod"> HTTP method Twilio should use when requesting the above URL. </param>
        /// <param name="trim"> Boolean flag for clipping intervals that have no media. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> CreateAsync(string friendlyName, 
                                                                                             bool? enabled = null, 
                                                                                             object videoLayout = null, 
                                                                                             List<string> audioSources = null, 
                                                                                             List<string> audioSourcesExcluded = null, 
                                                                                             string resolution = null, 
                                                                                             CompositionHookResource.FormatEnum format = null, 
                                                                                             Uri statusCallback = null, 
                                                                                             Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                                                             bool? trim = null, 
                                                                                             ITwilioRestClient client = null)
        {
            var options = new CreateCompositionHookOptions(friendlyName){Enabled = enabled, VideoLayout = videoLayout, AudioSources = audioSources, AudioSourcesExcluded = audioSourcesExcluded, Resolution = resolution, Format = format, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, Trim = trim};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateCompositionHookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Video,
                "/v1/CompositionHooks/" + options.PathSid + "",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Update(UpdateCompositionHookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update CompositionHook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> UpdateAsync(UpdateCompositionHookOptions options, 
                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> A 34-character string that uniquely identifies this Composition Hook. </param>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        /// <param name="enabled"> Boolean flag for activating the Composition Hook. </param>
        /// <param name="videoLayout"> The JSON video layout description. </param>
        /// <param name="audioSources"> A list of audio sources related to this Composition Hook. </param>
        /// <param name="audioSourcesExcluded"> A list of audio sources excluded related to this Composition Hook. </param>
        /// <param name="trim"> Boolean flag for clipping intervals that have no media. </param>
        /// <param name="format"> Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        ///              </param>
        /// <param name="resolution"> Pixel resolution of the composed video. </param>
        /// <param name="statusCallback"> A URL that Twilio sends asynchronous webhook requests to on every composition event.
        ///                      </param>
        /// <param name="statusCallbackMethod"> HTTP method Twilio should use when requesting the above URL. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CompositionHook </returns> 
        public static CompositionHookResource Update(string pathSid, 
                                                     string friendlyName, 
                                                     bool? enabled = null, 
                                                     object videoLayout = null, 
                                                     List<string> audioSources = null, 
                                                     List<string> audioSourcesExcluded = null, 
                                                     bool? trim = null, 
                                                     CompositionHookResource.FormatEnum format = null, 
                                                     string resolution = null, 
                                                     Uri statusCallback = null, 
                                                     Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                     ITwilioRestClient client = null)
        {
            var options = new UpdateCompositionHookOptions(pathSid, friendlyName){Enabled = enabled, VideoLayout = videoLayout, AudioSources = audioSources, AudioSourcesExcluded = audioSourcesExcluded, Trim = trim, Format = format, Resolution = resolution, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> A 34-character string that uniquely identifies this Composition Hook. </param>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        /// <param name="enabled"> Boolean flag for activating the Composition Hook. </param>
        /// <param name="videoLayout"> The JSON video layout description. </param>
        /// <param name="audioSources"> A list of audio sources related to this Composition Hook. </param>
        /// <param name="audioSourcesExcluded"> A list of audio sources excluded related to this Composition Hook. </param>
        /// <param name="trim"> Boolean flag for clipping intervals that have no media. </param>
        /// <param name="format"> Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        ///              </param>
        /// <param name="resolution"> Pixel resolution of the composed video. </param>
        /// <param name="statusCallback"> A URL that Twilio sends asynchronous webhook requests to on every composition event.
        ///                      </param>
        /// <param name="statusCallbackMethod"> HTTP method Twilio should use when requesting the above URL. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CompositionHook </returns> 
        public static async System.Threading.Tasks.Task<CompositionHookResource> UpdateAsync(string pathSid, 
                                                                                             string friendlyName, 
                                                                                             bool? enabled = null, 
                                                                                             object videoLayout = null, 
                                                                                             List<string> audioSources = null, 
                                                                                             List<string> audioSourcesExcluded = null, 
                                                                                             bool? trim = null, 
                                                                                             CompositionHookResource.FormatEnum format = null, 
                                                                                             string resolution = null, 
                                                                                             Uri statusCallback = null, 
                                                                                             Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                                                             ITwilioRestClient client = null)
        {
            var options = new UpdateCompositionHookOptions(pathSid, friendlyName){Enabled = enabled, VideoLayout = videoLayout, AudioSources = audioSources, AudioSourcesExcluded = audioSourcesExcluded, Trim = trim, Format = format, Resolution = resolution, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod};
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a CompositionHookResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> CompositionHookResource object represented by the provided JSON </returns> 
        public static CompositionHookResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<CompositionHookResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// Twilio Account SID.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// Friendly name of the Composition Hook to be shown in the console.
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// Boolean flag for activating the Composition Hook.
        /// </summary>
        [JsonProperty("enabled")]
        public bool? Enabled { get; private set; }
        /// <summary>
        /// Date when the Composition Hook Resource was created.
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// Date when the Composition Hook was last updated.
        /// </summary>
        [JsonProperty("date_updated")]
        public string DateUpdated { get; private set; }
        /// <summary>
        /// A 34-character string that uniquely identifies this Composition Hook.
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// A list of audio sources related to this Composition Hook.
        /// </summary>
        [JsonProperty("audio_sources")]
        public List<string> AudioSources { get; private set; }
        /// <summary>
        /// A list of audio sources excluded related to this Composition Hook.
        /// </summary>
        [JsonProperty("audio_sources_excluded")]
        public List<string> AudioSourcesExcluded { get; private set; }
        /// <summary>
        /// The JSON video layout description.
        /// </summary>
        [JsonProperty("video_layout")]
        public object VideoLayout { get; private set; }
        /// <summary>
        /// Pixel resolution of the composed video.
        /// </summary>
        [JsonProperty("resolution")]
        public string Resolution { get; private set; }
        /// <summary>
        /// Boolean flag for clipping intervals that have no media.
        /// </summary>
        [JsonProperty("trim")]
        public bool? Trim { get; private set; }
        /// <summary>
        /// The file format for the Compositions triggered by the Composition Hook.
        /// </summary>
        [JsonProperty("format")]
        [JsonConverter(typeof(StringEnumConverter))]
        public CompositionHookResource.FormatEnum Format { get; private set; }
        /// <summary>
        /// The status_callback
        /// </summary>
        [JsonProperty("status_callback")]
        public string StatusCallback { get; private set; }
        /// <summary>
        /// The status_callback_method
        /// </summary>
        [JsonProperty("status_callback_method")]
        [JsonConverter(typeof(HttpMethodConverter))]
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; private set; }
        /// <summary>
        /// The absolute URL for this resource.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private CompositionHookResource()
        {

        }
    }

}