/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Video.V1 
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Returns a single Composition Hook Instance resource identified by a CompositionHookSid.
    /// </summary>
    public class FetchCompositionHookOptions : IOptions<CompositionHookResource> 
    {
        /// <summary>
        /// The Composition Hook Sid that uniquely identifies the Composition Hook to fetch.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchCompositionHookOptions
        /// </summary>
        /// <param name="pathSid"> The Composition Hook Sid that uniquely identifies the Composition Hook to fetch. </param>
        public FetchCompositionHookOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// List of all Recording Composition Hooks.
    /// </summary>
    public class ReadCompositionHookOptions : ReadOptions<CompositionHookResource> 
    {
        /// <summary>
        /// Only show Composition Hooks enabled or disabled.
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// Only show Composition Hooks created on or after this ISO8601 date-time.
        /// </summary>
        public DateTime? DateCreatedAfter { get; set; }
        /// <summary>
        /// Only show Composition Hooks created before this this ISO8601 date-time.
        /// </summary>
        public DateTime? DateCreatedBefore { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
            }

            if (DateCreatedAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedAfter", Serializers.DateTimeIso8601(DateCreatedAfter)));
            }

            if (DateCreatedBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedBefore", Serializers.DateTimeIso8601(DateCreatedBefore)));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Delete a Recording Composition Hook Instance resource identified by a `CompositionHookSid`.
    /// </summary>
    public class DeleteCompositionHookOptions : IOptions<CompositionHookResource> 
    {
        /// <summary>
        /// The Recording Composition Hook Sid that uniquely identifies the Recording Composition Hook to delete.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteCompositionHookOptions
        /// </summary>
        /// <param name="pathSid"> The Recording Composition Hook Sid that uniquely identifies the Recording Composition Hook
        ///               to delete. </param>
        public DeleteCompositionHookOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// CreateCompositionHookOptions
    /// </summary>
    public class CreateCompositionHookOptions : IOptions<CompositionHookResource> 
    {
        /// <summary>
        /// Friendly name of the Composition Hook to be shown in the console.
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// Boolean flag for activating the Composition Hook.
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// The JSON video layout description.
        /// </summary>
        public object VideoLayout { get; set; }
        /// <summary>
        /// A list of audio sources related to this Composition Hook.
        /// </summary>
        public List<string> AudioSources { get; set; }
        /// <summary>
        /// A list of audio sources excluded related to this Composition Hook.
        /// </summary>
        public List<string> AudioSourcesExcluded { get; set; }
        /// <summary>
        /// Pixel resolution of the composed video.
        /// </summary>
        public string Resolution { get; set; }
        /// <summary>
        /// Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        /// </summary>
        public CompositionHookResource.FormatEnum Format { get; set; }
        /// <summary>
        /// A URL that Twilio sends asynchronous webhook requests to on every composition event.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// HTTP method Twilio should use when requesting the above URL.
        /// </summary>
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
        /// <summary>
        /// Boolean flag for clipping intervals that have no media.
        /// </summary>
        public bool? Trim { get; set; }

        /// <summary>
        /// Construct a new CreateCompositionHookOptions
        /// </summary>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        public CreateCompositionHookOptions(string friendlyName)
        {
            FriendlyName = friendlyName;
            AudioSources = new List<string>();
            AudioSourcesExcluded = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
            }

            if (VideoLayout != null)
            {
                p.Add(new KeyValuePair<string, string>("VideoLayout", Serializers.JsonObject(VideoLayout)));
            }

            if (AudioSources != null)
            {
                p.AddRange(AudioSources.Select(prop => new KeyValuePair<string, string>("AudioSources", prop)));
            }

            if (AudioSourcesExcluded != null)
            {
                p.AddRange(AudioSourcesExcluded.Select(prop => new KeyValuePair<string, string>("AudioSourcesExcluded", prop)));
            }

            if (Resolution != null)
            {
                p.Add(new KeyValuePair<string, string>("Resolution", Resolution));
            }

            if (Format != null)
            {
                p.Add(new KeyValuePair<string, string>("Format", Format.ToString()));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }

            if (Trim != null)
            {
                p.Add(new KeyValuePair<string, string>("Trim", Trim.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// UpdateCompositionHookOptions
    /// </summary>
    public class UpdateCompositionHookOptions : IOptions<CompositionHookResource> 
    {
        /// <summary>
        /// A 34-character string that uniquely identifies this Composition Hook.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// Friendly name of the Composition Hook to be shown in the console.
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// Boolean flag for activating the Composition Hook.
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// The JSON video layout description.
        /// </summary>
        public object VideoLayout { get; set; }
        /// <summary>
        /// A list of audio sources related to this Composition Hook.
        /// </summary>
        public List<string> AudioSources { get; set; }
        /// <summary>
        /// A list of audio sources excluded related to this Composition Hook.
        /// </summary>
        public List<string> AudioSourcesExcluded { get; set; }
        /// <summary>
        /// Boolean flag for clipping intervals that have no media.
        /// </summary>
        public bool? Trim { get; set; }
        /// <summary>
        /// Container format of the Composition Hook media file. Any of the following: `mp4`, `webm`.
        /// </summary>
        public CompositionHookResource.FormatEnum Format { get; set; }
        /// <summary>
        /// Pixel resolution of the composed video.
        /// </summary>
        public string Resolution { get; set; }
        /// <summary>
        /// A URL that Twilio sends asynchronous webhook requests to on every composition event.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// HTTP method Twilio should use when requesting the above URL.
        /// </summary>
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        /// <summary>
        /// Construct a new UpdateCompositionHookOptions
        /// </summary>
        /// <param name="pathSid"> A 34-character string that uniquely identifies this Composition Hook. </param>
        /// <param name="friendlyName"> Friendly name of the Composition Hook to be shown in the console. </param>
        public UpdateCompositionHookOptions(string pathSid, string friendlyName)
        {
            PathSid = pathSid;
            FriendlyName = friendlyName;
            AudioSources = new List<string>();
            AudioSourcesExcluded = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
            }

            if (VideoLayout != null)
            {
                p.Add(new KeyValuePair<string, string>("VideoLayout", Serializers.JsonObject(VideoLayout)));
            }

            if (AudioSources != null)
            {
                p.AddRange(AudioSources.Select(prop => new KeyValuePair<string, string>("AudioSources", prop)));
            }

            if (AudioSourcesExcluded != null)
            {
                p.AddRange(AudioSourcesExcluded.Select(prop => new KeyValuePair<string, string>("AudioSourcesExcluded", prop)));
            }

            if (Trim != null)
            {
                p.Add(new KeyValuePair<string, string>("Trim", Trim.Value.ToString().ToLower()));
            }

            if (Format != null)
            {
                p.Add(new KeyValuePair<string, string>("Format", Format.ToString()));
            }

            if (Resolution != null)
            {
                p.Add(new KeyValuePair<string, string>("Resolution", Resolution));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }

            return p;
        }
    }

}